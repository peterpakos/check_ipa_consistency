#!/usr/bin/python

# Authors:
#   Peter Pakos <peter.pakos@wandisco.com>
#   Martin Basti <mbasti@redhat.com>
#
# Copyright (C) 2016  Peter Pakos <peter.pakos@wandisco.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""
The script checks consistency across FreeIPA servers.
Put BIND password in to ipa_check_consistency.passwd file to stop password
prompts.

Author: Peter Pakos <peter.pakos@wandisco.com>
Pythonized by: Martin Basti <mbasti@redhat.com>
"""

from __future__ import print_function
from __future__ import absolute_import

import logging
import argparse
import getpass
import os

from ipa_consistency_checker.checker import Checker
from ipa_consistency_checker.registry import FormatterRegistry

# Load all plugins, yes ugly but works
# pylint: disable=wildcard-import,unused-wildcard-import
from ipa_consistency_checker.formatters import *
# pylint: enable=wildcard-import,unused-wildcard-import

logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
parser.add_argument(
    '-H', '--hostname',
    dest='hostname',
    help=('Hostname of IPA server (e.g.: server1, server2.domain) '
          'Both short names and FQDNs are supported (FQDN if not within '
          'IPA domain). This option can be used multiple times.'),
    action='append',
    default=None,
)
parser.add_argument(
    '-W', '--password',
    dest='ask_password',
    help='prompt for BIND password',
    action='store_true',
    default=False,
)
parser.add_argument(
    '-s', '--suffix',
    dest='suffix',
    help='LDAP root suffix (default: "dc=ipa,dc=domain,dc=com")',
    action='store',
    default='dc=ipa,dc=domain,dc=com',
)
parser.add_argument(
    '-D', '--binddn',
    dest='binddn',
    help='BIND DN (default: cn=Directory Manager)',
    action='store',
    default='cn=Directory Manager',
)
parser.add_argument(
    ('--no-tls-I-know-what-I-am-doing-I-am-aware-that-password-is-transported'
     '-unencrypted-over-network-and-I-am-fine-with-that'),
    dest='tls',
    help='Disable TLS',
    action='store_false',
    default=True,
)


def check_file(dummy, path):
    """Check if file exists in argparser"""
    if os.path.isfile(path):
        return path
    else:
        raise argparse.ArgumentTypeError("File not found: {}".format(path))
parser.add_argument(
    '--cacert',
    dest='cacert',
    metavar='FILE',
    help='CA certificate file used for TLS connection',
    action='store',
    default=None,
    type=check_file,
)
parser.add_argument(
    '-n',
    dest='enabled_plugins',
    help=('Nagios plugin mode (all checks by default). This option can be '
          'used multiple times.\n{}'.format(CheckerRegistry.get_help())),
    choices=list(CheckerRegistry.iter_names()),
    action='append',
    default=None,
)
parser.add_argument(
    '--format',
    dest='output_format',
    help='Output format of data.\n{}'.format(FormatterRegistry.get_help()),
    action='store',
    default='table',
    choices=list(FormatterRegistry.iter_names()),
)
parser.add_argument(
    '--debug',
    dest='debug',
    help='enabling debug level logging',
    action='store_true',
    default=False,
)


def main():
    """
    Main program
    """
    # parse options
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.WARNING)

    hostnames = args.hostname
    if hostnames is None:
        hostnames = ['localhost']

    if args.ask_password:
        password = getpass.getpass('Directory manager password: ')
    else:
        password = 'test'

    if args.enabled_plugins is None:
        enabled_plugins = CheckerRegistry.iter_names()
    else:
        enabled_plugins = args.enabled_plugins

    # configuration of LDAP connection passed to each worker
    ldapconfig = {
        'password': password,
        'suffix': args.suffix,
        'binddn': args.binddn,
        'cacert': args.cacert,
        'tls': args.tls,
    }

    plugins = [(name, {}) for name in enabled_plugins]  # {} empty options
    logger.debug("enabled plugins: %r", plugins)
    checker = Checker()

    result = checker(hostnames, plugins, ldapconfig)

    # process output
    logger.debug("Output formatter: %s", args.output_format)
    plugin = FormatterRegistry.get_plugin(args.output_format)
    formatter = plugin()
    formatter.print(result)


if __name__ == '__main__':
    main()
